package VORLESUNG.WiederholungPA02Karten

/*
In der Variable cards ist ein Kartenset in Form einer Liste gespeichert.
Beispiel:
    "‚ô•Ô∏è7" steht f√ºr die Karte "Herz Sieben"
    "‚ô•Ô∏èA" steht f√ºr die Karte "Herz Ass"
 */
val cards: MutableList<String> = mutableListOf(
    "‚ô•Ô∏è7", "‚ô¶Ô∏è7", "‚ô†Ô∏è7", "‚ô£Ô∏è7",
    "‚ô•Ô∏è8", "‚ô¶Ô∏è8", "‚ô†Ô∏è8", "‚ô£Ô∏è8",
    "‚ô•Ô∏è9", "‚ô¶Ô∏è9", "‚ô†Ô∏è9", "‚ô£Ô∏è9",
    "‚ô•Ô∏è10", "‚ô¶Ô∏è10", "‚ô†Ô∏è10", "‚ô£Ô∏è10",
    "‚ô•Ô∏èB", "‚ô¶Ô∏èB", "‚ô†Ô∏èB", "‚ô£Ô∏èB",
    "‚ô•Ô∏èD", "‚ô¶Ô∏èD", "‚ô†Ô∏èD", "‚ô£Ô∏èD",
    "‚ô•Ô∏èK", "‚ô¶Ô∏èK", "‚ô†Ô∏èK", "‚ô£Ô∏èK",
    "‚ô•Ô∏èA", "‚ô¶Ô∏èA", "‚ô†Ô∏èA", "‚ô£Ô∏èA",
    "üÉèJOKER"
)


/*
In der Variable values sind die Werte der Karten in einer Map gespeichert.
Beispiel:
    "‚ô•Ô∏è7" to 1 steht f√ºr einen Wert von 1 f√ºr die Karte "Herz Sieben"
    "‚ô•Ô∏èA" to 8 steht f√ºr einen Wert von 8 f√ºr die Karte "Herz Ass"
Bei einem Vergleich der Werte w√ºrde also das "Herz Ass" gewinnen
 */
val cardValues: Map<String, Int> = mapOf(
    "‚ô•Ô∏è7" to 1, "‚ô¶Ô∏è7" to 1, "‚ô†Ô∏è7" to 1, "‚ô£Ô∏è7" to 1,
    "‚ô•Ô∏è8" to 2, "‚ô¶Ô∏è8" to 2, "‚ô†Ô∏è8" to 2, "‚ô£Ô∏è8" to 2,
    "‚ô•Ô∏è9" to 3, "‚ô¶Ô∏è9" to 3, "‚ô†Ô∏è9" to 3, "‚ô£Ô∏è9" to 3,
    "‚ô•Ô∏è10" to 4, "‚ô¶Ô∏è10" to 4, "‚ô†Ô∏è10" to 4, "‚ô£Ô∏è10" to 4,
    "‚ô•Ô∏èB" to 5, "‚ô¶Ô∏èB" to 5, "‚ô†Ô∏èB" to 5, "‚ô£Ô∏èB" to 5,
    "‚ô•Ô∏èD" to 6, "‚ô¶Ô∏èD" to 6, "‚ô†Ô∏èD" to 6, "‚ô£Ô∏èD" to 6,
    "‚ô•Ô∏èK" to 7, "‚ô¶Ô∏èK" to 7, "‚ô†Ô∏èK" to 7, "‚ô£Ô∏èK" to 7,
    "‚ô•Ô∏èA" to 8, "‚ô¶Ô∏èA" to 8, "‚ô†Ô∏èA" to 8, "‚ô£Ô∏èA" to 8,
    "üÉèJOKER" to 10
)

fun main() {
    // Beispiel: Liste anlegen
    var liste: List<String> = listOf("Jacke", "Hose","Schal","M√ºtze")
    var numbers: List<Int> = listOf(1,2,3,4,5)

    // Aufgabe 1: Karten mischen
    cards.shuffle()

    // Aufgabe 2: Spielernamen eingeben
    println("Spieler 1, bitte Namen eingeben...")
    var spieler1: String = readln()
    println("Spieler 2, bitte Namen eingeben...")
    var spieler2: String = readln()

    // Aufgabe 3: Spielerh√§nde erstellen
    // leere Hand
    val handSpieler1: MutableList<String> = mutableListOf()
    val handSpieler2: MutableList<String> = mutableListOf()

    // erste Karte vom cards Stapel ziehen, auf die Hand legen

    // lange Variante: Variable
    var firstCard: String = cards.removeFirst()
    handSpieler1.add(firstCard)

    // kurze Variante: ohne Variablen
    handSpieler2.add(cards.removeFirst())
    handSpieler1.add(cards.removeFirst())
    handSpieler2.add(cards.removeFirst())
    handSpieler1.add(cards.removeFirst())
    handSpieler2.add(cards.removeFirst())

    println(cards)
    println(handSpieler1)
    println(handSpieler2)

    // Aufgabe 4: in Funktion ausgelagert
    cardStealing(handSpieler1,handSpieler2)
    // manuell spieler 1 eine karte abwerfen lassen, weil er sonst 4 hat:
    handSpieler1.removeFirst()
    println("Hand Spieler 1 $spieler1 nach dem klauen: $handSpieler1")
    cardStealing(handSpieler2,handSpieler1)
    println("Hand Spieler 2 $spieler2 nach dem klauen: $handSpieler2")



    // Aufgabe 5
     /*
     Programmiere eine Benutzerinteraktion
    Beide Spieler sollen nacheinander eine Zahl zwischen 1 und 3 eingeben k√∂nnen
    Die entsprechende Karte soll entfernt werden
    Die oberste Karte aus dem Stapel soll gezogen werden
    Gib jeweils auf der Konsole aus, welche Karte abgeworfen wurde und welche gezogen wurde
      */


    println("Spieler 1 $spieler1, eelche Karte willst du abwerfen? \nBitte Zahl zwischen 1 und 3 eingeben...")
    var input = readln().toInt()-1 // minus(1)
    println("Spieler 1 hat die Karte $input ausgew√§hlt, sie wird abgeworfen...")
    // karte abwerfen
    handSpieler1.removeAt(input)
    println("Neue Hand Spieler 1: $handSpieler1")

    println("Spieler 2 $spieler2, eelche Karte willst du abwerfen? \nBitte Zahl zwischen 1 und 3 eingeben...")
    var input2 = readln().toInt()-1 // minus(1)
    println("Spieler 2 hat die Karte $input2 ausgew√§hlt, sie wird abgeworfen...")
    // karte abwerfen
    handSpieler2.removeAt(input2)
    println("Neue Hand Spieler 2: $handSpieler2")

    handSpieler1.add(cards.removeFirst())
    println("Neue Hand $spieler1: $handSpieler1")

    handSpieler2.add(cards.removeFirst())
    println("Neue Hand $spieler2: $handSpieler2")


    // Aufgabe 6:
    // Rechne den Gesamtwert der Karten f√ºr jeden Spieler aus. Nutze daf√ºr die cardValues Map

    // 1. Variable, in die ich Werte speichere
    var valuesPlayer1: Int = 0
    var valuesPlayer2: Int = 0

    // 2. Rechnung beginnen
    // lange Variante:
    // Variable mit dem Inhalt der Karte aus der Hand
    var inhalt = handSpieler1[0]
    // Wert aus der Map in Variable speichern
    var value: Int = cardValues[inhalt]!!

    // Wert in die Values Variable addieren
    valuesPlayer1 = valuesPlayer1 + value
    valuesPlayer1 = valuesPlayer1 + cardValues[handSpieler1[1]]!!
    valuesPlayer1 = valuesPlayer1 + cardValues[handSpieler1[2]]!!

    println("Wert der Hand von Player 1 $spieler1: $valuesPlayer1")

}

/**
 * l√§sst einen spieler eine Karte aus der hand des anderen spielers klauen
 * @param diebHand, der klauende
 * @param opferHand, der beklaute
 */
fun cardStealing(diebHand: MutableList<String>, opferHand: MutableList<String>){

    // eine zuf√§llige Karte vom Opfer ausw√§hlen
    var randomCard: String = opferHand.random()
    println("Zuf√§llige Karte aus Opferhand: $randomCard")
    // diese karte vom opfer entfernen
    opferHand.remove(randomCard)
    // diese karte dem dieb geben
    diebHand.add(randomCard)

    println("Dieb had $randomCard von Opfer gestohlen.")
    println("Dieb hand: $diebHand")
}
